---
description: 
globs: 
alwaysApply: false
---
# Go-Occupy 开发指南

## 代码规范

### Go语言规范
- 遵循Go官方代码规范
- 使用gofmt格式化代码
- 函数和变量命名使用驼峰命名法
- 导出函数和类型首字母大写

### 包结构规范
- 核心业务逻辑放在 `pkg/occupy` 包中
- 每个包职责单一，功能内聚
- 避免包之间的循环依赖
- 使用接口定义模块间的交互

### 错误处理
- 使用Go标准错误处理模式
- 错误信息要具体且有帮助
- 在资源清理时处理错误
- 使用 `errors.Wrap` 包装错误上下文

## 核心模块设计

### ResourceMonitor 模块
- 负责CPU、内存、磁盘资源管理
- 提供资源占用和释放接口
- 支持资源监控和状态查询
- 实现优雅的资源清理机制

### 配置管理
- 使用YAML格式配置文件
- 支持命令行参数覆盖配置
- 提供合理的默认值
- 配置验证和错误提示

## 构建和部署

### 本地开发
```bash
# 构建项目
make build

# 运行程序
make run

# 清理构建产物
make clean
```

### Docker部署
```bash
# 构建Docker镜像
make docker-build

# 运行Docker容器
make docker-run

# 推送镜像
make docker-push
```

## 性能优化

### 资源管理
- 及时释放不再使用的资源
- 使用goroutine管理并发操作
- 避免内存泄漏
- 合理设置资源限制

### 监控和日志
- 记录关键操作日志
- 监控资源使用情况
- 提供性能指标
- 支持调试模式

## 安全考虑

### 资源限制
- 设置合理的资源使用上限
- 防止资源耗尽攻击
- 支持资源使用配额
- 监控异常资源使用

### 权限控制
- 最小权限原则
- 文件系统访问控制
- 进程权限管理
- 网络访问限制
